src/exec/execute_tokens.c:	sh->retval = func(cp->cont, sh);
src/exec/execute_tokens.c:			if (WEXITSTATUS(sh->retval) != 0)
src/exec/execute_tokens.c:			if (WEXITSTATUS(sh->retval) == 0)
src/exec/execute_tokens.c:				(sh->retval = func(cp->cont, sh));
src/exec/execute_tokens_old.c:	sh->retval = 127;
src/exec/execute_tokens_old.c:	if ((path = get_hash_path(&sh->hash, command, sh)))
src/exec/execute_tokens_old.c:		sh->retval = 127;
src/exec/main_exec.c:		exit(WEXITSTATUS(sh->retval));
src/exec/main_exec.c:	if ((sh->pid = fork()) == 0)
src/exec/main_exec.c:		env = env_list_to_char(&sh->env);
src/exec/main_exec.c:	if (WIFSIGNALED(sh->retval) && WTERMSIG(sh->retval) == 2)
src/exec/main_exec.c:	sh->pid = 0;
src/exec/main_exec.c:		sh->retval = init_pipe(cmd, tabtube, sh);
src/exec/main_exec.c:	else if ((fullpath = command_path(&sh->env, cli, sh)))
src/exec/main_exec.c:		sh->retval = -1;
src/exec/main_exec.c:	waitpid(sh->pid, &sh->retval, WUNTRACED);
src/exec/pipe.c:		sh->retval = func(cmd->cont, sh);
src/exec/pipe.c:		exit(sh->retval);
src/exec/pipe.c:	else if (!(fullpath = command_path(&sh->env, cmd->cont[0], sh)))
src/exec/pipe.c:		close(tabtube[sh->i].cote[0]);
src/exec/pipe.c:		close(tabtube[sh->i].cote[1]);
src/exec/pipe.c:		pipe_tmp(cmd, sh->i, tabtube, sh);
src/exec/pipe.c:	pid_tab[sh->i] = son;
src/exec/pipe.c:	sh->i = 0;
src/exec/pipe.c:	while (sh->i < cmd->nb_arg - 1)
src/exec/pipe.c:		sh->i++;
src/exec/pipe.c:		sh->retval = cpy->status;
src/exec/pipe.c:	return (sh->retval);
